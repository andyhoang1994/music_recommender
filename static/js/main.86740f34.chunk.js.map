{"version":3,"sources":["components/GetToken.js","components/Sliders.js","components/PlaySong.js","components/CreatePlaylist.js","components/GetSongs.js","components/Search.js","components/SongList.js","components/SelectedSongs.js","components/Body.js","App.js","index.js"],"names":["GetToken","apiUrl","react_default","a","createElement","Button_default","variant","color","className","target","href","this","tokenRequestUrl","Component","Sliders","_this","Tooltip_default","title","InputLabel_default","disableAnimation","props","acousticness","js_default","minValue","maxValue","step","value","formatLabel","e","onChange","updateSliders","danceability","energy","instrumentalness","valence","PlaySong","uri","axios","headers","Accept","Content-Type","Authorization","concat","localStorage","getItem","url","then","resp","index","data","devices","is_active","is_restricted","id","Error","device","method","params","device_id","uris","catch","err","console","log","response","status","window","open","CreatePlaylist","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","getUserId","handleChange","setState","playlistNameInputValue","buildSongUriArray","songs","uriArray","map","song","push","self","assertThisInitialized","spotify","getMe","spotifyUser","error","fillPlaylist","playlistID","addTracksToPlaylist","recommendedList","getPlaylist","playlistName","state","createPlaylist","name","public","playlistUrl","external_urls","bind","isReturned","style","margin","TextField_default","label","onClick","Save_default","OpenInNew_default","Fragment","GetSongs","updateRecommended","getSeedID","seeds","seedID","seed","i","getRecommendations","seed_tracks","selectedSongs","target_acousticness","target_danceability","target_energy","target_instrumentalness","target_valence","tracks","createItems","listItems","ListItem_default","key","alignItems","ListItemAvatar_default","Avatar_default","src","album","images","ListItemText_default","classes","primary","secondary","artists","Fab_default","aria-label","size","PlayArrow_default","components_CreatePlaylist","List_default","render","Search_default","Search","query","onSubmit","getSearchResults","Input_default","placeholder","margin-top","type","updateSongList","event","preventDefault","searchTracks","items","SongList","addSelectedSong","val","songList","Add_default","SelectedSongs","removeSelectedSong","addItem","IconButton_default","Delete_default","Body","newSong","length","includes","newArr","recalcValues","toConsumableArray","indexOf","splice","_this$setState","defineProperty","parseFloat","toFixed","avgAcousticness","avgDanceability","avgEnergy","avgInstrumentalness","avgValence","getAudioFeaturesForTracks","audio_features","Spotify","haveToken","setAccessToken","token","setItem","chosenGenres","songListNeedsUpdate","seedCount","tokenValid","components_Search","components_SongList","components_SelectedSongs","components_Sliders","components_GetSongs","components_GetToken","App","invalidateToken","accessToken","components_Body","ReactDOM","src_App_0","result","location","hash","match","getAccessToken","document","getElementById"],"mappings":"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","file":"static/js/main.86740f34.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\n\nclass GetToken extends Component{\n\n    tokenRequestUrl(){\n        const apiUrl = 'https://accounts.spotify.com/authorize';\n        const clientId = '4a12399447fb43f3a7e85bde067b6743'; //Enter you Spotify app client ID\n        const redirectUri = 'https://andyhoang1994.github.io/music_recommender'; //Enter your redirect uri that you've inputted into your Spotify app;\n        const responseType = 'token';\n        const requestUrl = \n            apiUrl +\n            '?client_id=' + clientId +\n            '&redirect_uri=' + redirectUri +\n            '&response_type=' + responseType\n        ;     \n        return requestUrl;\n    }\n\n    render(){\n        return(\n            <Button  variant=\"contained\" color=\"primary\" className=\"get_token\" target = \"\" href={this.tokenRequestUrl()}>Authorize Spotify</Button>\n        );\n    }\n}\n\nexport default GetToken","import React, { Component } from 'react';\nimport InputRange from 'react-input-range';\nimport 'react-input-range/lib/css/index.css'\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Tooltip from '@material-ui/core/Tooltip';\n\n\nclass Sliders extends Component {\n    render() { \n        return ( \n            <div className=\"sliderContainer\">\n                <Tooltip title=\"Acousticness is a confidence measure of whether a track is acoustic or not\">\n                    <div>\n                        <InputLabel disableAnimation={true}>Acousticness: {this.props.acousticness}</InputLabel>\n                        <InputRange\n                            minValue={0.0}\n                            maxValue={1.0}\n                            step={0.01}\n                            value={this.props.acousticness}\n                            formatLabel={e => \"\"}\n                            onChange={value => this.props.updateSliders(value, 'acousticness')} \n                        />\n                    </div>\n                </Tooltip>\n                <Tooltip title=\"Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity.\">\n                    <div>\n                        <InputLabel disableAnimation={true}>Danceability: {this.props.danceability}</InputLabel>\n                        <InputRange\n                            minValue={0.0}\n                            maxValue={1.0}\n                            step={0.01}\n                            value={this.props.danceability}\n                            formatLabel={e => \"\"}\n                            onChange={value => this.props.updateSliders(value, 'danceability')} \n                        />\n                    </div>\n                </Tooltip>\n                <Tooltip title=\"Energy represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.\">\n                    <div>\n                        <InputLabel disableAnimation={true}>Energy: {this.props.energy}</InputLabel>\n                        <InputRange\n                            minValue={0.0}\n                            maxValue={1.0}\n                            step={0.01}\n                            value={this.props.energy}\n                            formatLabel={e => \"\"}\n                            onChange={value => this.props.updateSliders(value, 'energy')} \n                        />\n                    </div>\n                </Tooltip>\n                <Tooltip title=\"Instrumentalness predicts whether a track contains no vocals. “Ooh” and “aah” sounds are treated as instrumental in this context. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.\">\n                    <div>\n                        <InputLabel disableAnimation={true}>Instrumentalness: {this.props.instrumentalness}</InputLabel>\n                        <InputRange\n                            minValue={0.0}\n                            maxValue={1.0}\n                            step={0.01}\n                            value={this.props.instrumentalness}\n                            formatLabel={e => \"\"}\n                            onChange={value => this.props.updateSliders(value, 'instrumentalness')} \n                        />\n                    </div>\n                </Tooltip>\n                <Tooltip title=\"Valence is a measure describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).\">\n                    <div>\n                        <InputLabel disableAnimation={true}>Valence: {this.props.valence}</InputLabel>\n                        <InputRange\n                            minValue={0.0}\n                            maxValue={1.0}\n                            step={0.01}\n                            value={this.props.valence}\n                            formatLabel={e => \"\"}\n                            onChange={value => this.props.updateSliders(value, 'valence')} \n                        />\n                    </div>\n                </Tooltip>\n            </div>\n        );\n    }\n}\n \nexport default Sliders;","import axios from 'axios';\n\nconst PlaySong = (uri, href) => {\n    axios({\n        headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('access_token')}`\n        },\n        url: 'https://api.spotify.com/v1/me/player/devices'\n    })\n        .then(resp => {\n        let index = 0;\n        while(resp.data.devices[index]) {\n            if (resp.data.devices[index].is_active && !resp.data.devices[index].is_restricted) {\n            return resp.data.devices[index].id;\n            }\n            index++;\n        }\n        if (typeof resp.data.devices[0] !== 'undefined') {\n            return resp.data.devices[0].id\n        }\n        throw Error('Cannot find an available device to play on.')\n        })\n\n        .then((device) => {\n        axios({\n            headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('access_token')}`\n            },\n            url: 'https://api.spotify.com/v1/me/player/play',\n            method: 'PUT',\n            params: {\n            device_id: device,\n            },\n            data: {\n            uris: [uri],\n            }\n        })\n            .catch(err => {\n            console.log(err);\n            if (!err.response.status) return;\n            let errorStatus = err.response.status;\n            if (errorStatus === 400) {\n            }\n        })\n    })\n    .catch(err => {\n        console.log(href);\n        window.open(href, '_blank');\n    });\n};\n\nexport default PlaySong;","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button'\nimport SaveIcon from '@material-ui/icons/Save';\nimport OpenInNew from '@material-ui/icons/OpenInNew';\nimport TextField from '@material-ui/core/TextField';\n\nclass CreatePlaylist extends Component{\n    constructor(props){\n        super(props);\n        this.getPlaylist = this.getPlaylist.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.state = {\n            error: null,\n            isReturned: false,\n            spotifyUser: null,\n            playlistNameInputValue: '',\n            playlistUrl: '',\n        };\n    }\n\n    componentDidMount = () => {\n        this.getUserId();\n    }\n    \n    handleChange = (e) => {\n        this.setState(\n            {playlistNameInputValue: e.target.value}\n        );\n    }\n\n    buildSongUriArray = (songs) => {\n        let uriArray = [];\n        songs.map(song => uriArray.push(song.uri));\n        return (uriArray);\n    }\n\n    getUserId = () => {\n        let self = this;\n        this.props.spotify.getMe().then(\n            function(response){\n                self.setState({\n                    spotifyUser: response,\n                })\n            }, function(error) {\n                console.error(error);\n            }\n        )\n    }\n\n    fillPlaylist = (playlistID) => {\n        this.props.spotify.addTracksToPlaylist(playlistID,this.buildSongUriArray(this.props.recommendedList)).then(\n            function(){\n            }, function(error){\n                console.error(error);\n            }\n        )\n    }\n\n    getPlaylist = () => {\n        let self = this;\n        let playlistName = (this.state.playlistNameInputValue !== '' ? this.state.playlistNameInputValue : \"New Playlist\");\n        this.props.spotify.createPlaylist(\n            this.state.spotifyUser.id,\n            {\n                name: playlistName + \" (Created by Recommender)\",\n                public: true\n            }\n        ).then(\n            function(response){\n                self.fillPlaylist(response.id);\n                self.setState({playlistUrl: response.external_urls.spotify});\n            }, function(error){\n                console.error(error);\n            }\n        );\n    }\n\n    render(){\n        if(this.state.spotifyUser != null){\n            return(\n                <div className=\"create_playlist\" style={{margin: '20px 0'}}>\n                    <TextField label=\"Playlist Name\"value={this.state.playlistNameInputValue} onChange={this.handleChange}/>\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.getPlaylist}>\n                        Create Playlist\n                        <SaveIcon className=\"rightIcon\"/>    \n                    </Button>\n                    <div>\n                        {this.state.playlistUrl !== \"\"\n                            ? <Button className=\"open_playlist\" variant=\"contained\" href={this.state.playlistUrl} target=\"_blank\">\n                                Open Playlist\n                                <OpenInNew className=\"rightIcon\"/>\n                            </Button>\n                            : <React.Fragment/>\n                        }\n                    </div>\n                </div>\n            );\n        }\n        else{\n            return <React.Fragment/>\n        }\n    }\n}\n\nexport default CreatePlaylist","import React, { Component } from 'react';\nimport PlaySong from './PlaySong.js';\nimport Button from '@material-ui/core/Button';\nimport SearchIcon from '@material-ui/icons/Search';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport PlayArrow from '@material-ui/icons/PlayArrow';\nimport Fab from '@material-ui/core/Fab';\nimport CreatePlaylist from './CreatePlaylist.js';\n\nclass GetSongs extends Component{\n    constructor(props){\n        super(props);\n        this.getRecommendations = this.getRecommendations.bind(this);\n    }\n\n    updateRecommended = (songs) => {\n        this.props.updateRecommended(songs);\n    }\n    getSeedID = (seeds) => {\n        let seedID = [];\n        seeds.map((seed, i) => {\n            return seedID = seedID.concat(seed.id);\n        })\n        return seedID;\n    }\n\n    getRecommendations = () => {\n        let self = this;\n        let seeds = {\n            seed_tracks: this.getSeedID(this.props.selectedSongs),\n            target_acousticness: this.props.acousticness,\n            target_danceability: this.props.danceability,\n            target_energy: this.props.energy,\n            target_instrumentalness: this.props.instrumentalness,\n            target_valence: this.props.valence,\n        }\n        this.props.spotify.getRecommendations(seeds, function(error, data) {\n            if(error) console.log(error);\n            else{\n                self.updateRecommended(data.tracks);\n                console.log(data.tracks);\n            }\n        })\n        this.createItems();\n    }\n\n    createItems = () => {\n        const listItems = this.props.recommendedList.map((song, i) => {\n            return  <ListItem key={i} alignItems=\"flex-start\" className='listItem'>\n                        <ListItemAvatar>\n                            <Avatar src={song.album.images[2].url}/>\n                        </ListItemAvatar>\n                        <ListItemText\n                            classes={{primary:'overflow', secondary:'overflow'}}\n                            primary={song.name}\n                            secondary={song.artists[0].name}\n                        />\n                        <Fab color=\"primary\" aria-label=\"Play_Arrow\" size=\"small\">\n                            <PlayArrow onClick={PlaySong.bind(this, song.uri, song.external_urls.spotify)}/>\n                        </Fab>\n                    </ListItem>;\n        });\n        return(\n            <React.Fragment>\n                <CreatePlaylist\n                spotify={this.props.spotify}\n                recommendedList={this.props.recommendedList}\n                />\n                <List className=\"songList\">\n                    {listItems}\n                </List> \n            </React.Fragment>\n        );\n    }\n\n    render = () => {\n        return(\n            <div>\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.getRecommendations}>\n                    Get Songs\n                    <SearchIcon className=\"rightIcon\"/>\n                </Button>\n                <div>{this.createItems()}</div>\n            </div>\n        )\n    }\n}\n\nexport default GetSongs","import React, { Component } from 'react';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport SearchIcon from '@material-ui/icons/Search';\n\nclass Search extends Component{\n    constructor(props){\n        super(props);\n        this.getSearchResults = this.getSearchResults.bind(this);\n\n        this.state = {\n            query: '',\n        }\n    }\n    updateSongList(songs){\n        this.props.updateSongList(songs);\n    }\n    getSearchResults(event){\n        event.preventDefault();\n        let self = this;\n\n        this.props.spotify.searchTracks(this.state.query)\n            .then(\n                function(data){\n                    console.log(data);\n                    self.updateSongList(data.tracks.items);\n                }, function(error){\n                    console.error(error);\n                }\n            )\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            query: e.target.value,\n        })\n    }\n\n    render = () => {\n        return(\n            <form onSubmit={this.getSearchResults}>\n                <Input variant=\"contained\" color=\"primary\" placeholder=\"Enter an artist or title\" onChange={this.handleChange} style={{'margin-top': '20px'}}>\n                </Input>\n                <br/>\n                <Button type=\"submit\" variant=\"outlined\" color=\"primary\" style={{margin: '20px'}}>\n                    Search\n                    <SearchIcon className=\"rightIcon\" />\n                </Button>\n            </form>\n        );\n    }\n}\nexport default Search","import React, { Component } from 'react';\nimport PlaySong from './PlaySong.js';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport AddIcon from '@material-ui/icons/Add';\nimport PlayArrow from '@material-ui/icons/PlayArrow';\nimport Fab from '@material-ui/core/Fab';\n\nclass SongList extends Component{\n    constructor(props){\n        super(props);\n    }\n\n    addSelectedSong = (song) => {\n      this.props.addSelectedSong(song);\n    }\n    updateSliders = (val, name) => {\n        this.props.updateSliders(val, name);\n    }\n    createItems = () => {\n        const listItems = this.props.songList.map((song, i) => {\n            return  <ListItem key={i} alignItems=\"flex-start\" className='listItem'>\n                        <ListItemAvatar>\n                            <Avatar src={song.album.images[2].url}/>\n                        </ListItemAvatar>\n                        <ListItemText\n                            classes={{primary:'overflow', secondary:'overflow'}}\n                            primary={song.name}\n                            secondary={song.artists[0].name}\n                        />\n                        <Fab color=\"primary\" aria-label=\"Play_Arrow\" size=\"small\" style={{margin:'0 10px'}}>\n                            <PlayArrow onClick={PlaySong.bind(this, song.uri, song.external_urls.spotify)}/>\n                        </Fab>\n                        <Fab color=\"primary\" aria-label=\"Add\" size=\"small\">\n                            <AddIcon  onClick={this.addSelectedSong.bind(this, song)}/>\n                        </Fab>\n                    </ListItem>;\n        });\n        return( \n            <List className=\"songList\">\n                {listItems}\n            </List>\n        );\n    }\n\n    render = () => { \n        return(\n          <React.Fragment>{this.createItems()}</React.Fragment>\n        );\n    }\n}\n \nexport default SongList;","import React, { Component } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\n\nclass SelectedSongs extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            acousticness: [],\n            danceability: [],\n            energy: [],\n            instrumentalness: [],\n            valence: [],\n        }\n    }\n\n    removeSelectedSong = (song) => {\n        this.props.removeSelectedSong(song);\n    }\n    \n    addItem = () => {\n        const listItems = this.props.selectedSongs.map((song, i) => {\n            return <ListItem key={i} alignItems=\"flex-start\" className='listItem'>\n                    <ListItemAvatar>\n                        <Avatar src={song.album.images[2].url}/>\n                    </ListItemAvatar>\n                    <ListItemText\n                        classes={{primary:'overflow', secondary:'overflow'}}\n                        primary={song.name}\n                        secondary={song.album.name}\n                    />\n                    <IconButton aria-label=\"Delete\">\n                        <DeleteIcon onClick={this.removeSelectedSong.bind(this, song)}/>\n                    </IconButton>\n                </ListItem>\n        });\n        return ( \n            <List className=\"songList\">\n                {listItems}\n            </List> \n        );\n    }\n\n    render = () => { \n        return(\n          <React.Fragment>{this.addItem()}</React.Fragment>\n        );\n    }\n}\n \nexport default SelectedSongs;","import React, { Component } from 'react';\nimport Spotify from 'spotify-web-api-js';\nimport GetToken from './GetToken.js';\nimport Sliders from './Sliders.js';\nimport GetSongs from './GetSongs.js';\nimport Search from './Search.js';\nimport SongList from './SongList.js';\nimport SelectedSongs from './SelectedSongs.js'\n\nclass Body extends Component{\n    constructor(props){\n        super(props);\n        this.spotify = new Spotify();\n        if(this.props.haveToken){\n            this.spotify.setAccessToken(this.props.token);\n        }\n        localStorage.setItem('access_token', this.props.token);\n        this.state = {\n            chosenGenres: [],\n            acousticness: 0.5.toFixed(2),\n            danceability: 0.5.toFixed(2),\n            energy: 0.5.toFixed(2),\n            instrumentalness:0.5.toFixed(2),\n            valence: 0.5.toFixed(2),\n            songList: [],\n            recommendedList: [],\n            selectedSongs: [],\n            songListNeedsUpdate: true,\n        };\n    }\n\n    updateSongList = (songList) => {\n        this.setState({songList: songList});\n        console.log('songList:',songList);\n    }\n    updateRecommended = (songs) => {\n        this.setState({recommendedList: songs})\n    }\n    addSelectedSong = (newSong) => {\n        if(this.state.selectedSongs.length < 5){\n            if(this.state.selectedSongs.includes(newSong) === false){\n                let newArr = this.state.selectedSongs.concat(newSong);\n                this.setState({selectedSongs: newArr},() => {\n                    this.recalcValues();\n                })\n            }\n        }\n    }\n    removeSelectedSong = (song) => {\n        var newArr = [...this.state.selectedSongs];\n        var index = newArr.indexOf(song);\n        if (index !== -1) {\n            newArr.splice(index, 1);\n            this.setState({selectedSongs: newArr}, () => {\n                this.recalcValues();\n            })\n        }\n    }\n    updateSliders = (val, name) => {\n        if(val === 'NaN') val = 0;\n        this.setState({\n            [name]: parseFloat(val).toFixed(2),\n            songListNeedsUpdate: true\n        })\n    }\n    recalcValues = () => {\n        let self = this;\n        \n        let seedID = [];\n        let avgAcousticness = 0;\n        let avgDanceability = 0;\n        let avgEnergy = 0;\n        let avgInstrumentalness = 0;\n        let avgValence = 0;\n        \n        this.state.selectedSongs.map((selectedSongs, i) => {\n            return seedID = seedID.concat(selectedSongs.id);\n        })\n\n        this.spotify.getAudioFeaturesForTracks(seedID, function(error, data) {\n            var i = seedID.length;\n\n            if (error) console.log(error);\n            else{\n                if(seedID.length > 0){\n                    data.audio_features.map((song) => {\n                        if(song != null){\n                            avgAcousticness += song.acousticness;\n                            avgDanceability += song.danceability;\n                            avgEnergy += song.energy;\n                            avgInstrumentalness += song.instrumentalness;\n                            avgValence += song.valence;\n                        }\n                        else i--;\n                    })\n                }\n                avgAcousticness = (avgAcousticness/i).toFixed(2);\n                self.updateSliders(avgAcousticness, 'acousticness');\n                avgDanceability = (avgDanceability/i).toFixed(2);\n                self.updateSliders(avgDanceability, 'danceability');\n                avgEnergy = (avgEnergy/i).toFixed(2);\n                self.updateSliders(avgEnergy, 'energy');\n                avgInstrumentalness = (avgInstrumentalness/i).toFixed(2);\n                self.updateSliders(avgInstrumentalness, 'instrumentalness');\n                avgValence = (avgValence/i).toFixed(2);\n                self.updateSliders(avgValence, 'valence');\n            }\n        })\n    }\n    \n    render(){ \n        this.seedCount = this.state.chosenGenres.length;\n        if(!this.props.haveToken || !this.props.tokenValid){\n            return(  \n                <div className=\"bodyContainer\">\n                    <GetToken />\n                </div>\n            );\n        } else{\n            return(\n                <div className=\"bodyContainer\">\n                    <div className=\"searchBox\">\n                        <Search\n                            spotify={this.spotify}\n                            getSearchResults={this.getSearchResults}\n                            updateSongList={this.updateSongList}\n                        />\n                        <SongList\n                            spotify={this.spotify}\n                            songList={this.state.songList}\n                            addSelectedSong={this.addSelectedSong}\n                            selectedSongs={this.state.selectedSongs}\n                            acousticness={this.state.acousticness} \n                            danceability={this.state.danceability}\n                            energy={this.state.energy} \n                            instrumentalness={this.state.instrumentalness}\n                            valence={this.state.valence}\n                            updateSliders={this.updateSliders}\n                        />\n                    </div>\n                    <div className=\"recommendBox\">\n                        <div className=\"selectedBox\">\n                            <SelectedSongs\n                                spotify={this.spotify}\n                                selectedSongs={this.state.selectedSongs}\n                                removeSelectedSong={this.removeSelectedSong}\n                                acousticness={this.state.acousticness} \n                                danceability={this.state.danceability}\n                                energy={this.state.energy} \n                                instrumentalness={this.state.instrumentalness}\n                                valence={this.state.valence}\n                            />\n                        </div>\n                        <Sliders\n                            acousticness={this.state.acousticness} \n                            danceability={this.state.danceability}\n                            energy={this.state.energy} \n                            instrumentalness={this.state.instrumentalness}\n                            valence={this.state.valence} \n                            updateSliders={this.updateSliders}\n                        />\n                        <GetSongs\n                            spotify={this.spotify}\n                            selectedSongs={this.state.selectedSongs}\n                            removeSelectedSong={this.removeSelectedSong}\n                            acousticness={this.state.acousticness} \n                            danceability={this.state.danceability}\n                            energy={this.state.energy}\n                            instrumentalness={this.state.instrumentalness}\n                            valence={this.state.valence}\n                            updateRecommended={this.updateRecommended}\n                            recommendedList={this.state.recommendedList}\n                        />\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n \nexport default Body;","import React, { Component  } from 'react';\nimport Body from './components/Body.js';\nimport './App.css';\n\nclass App extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.invalidateToken = this.invalidateToken.bind(this);\n\n\t\tthis.state = { \n\t\t\thaveToken: this.props.accessToken ? true : false,\n\t\t\ttokenValid: true\n\t\t}\n\t}\n\n\tinvalidateToken(){\n\t\tthis.setState({tokenValid: false});\n\t}\n\n\trender(){\n\t\treturn(  \n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<h1>Music Recommender</h1>\n\t\t\t\t\t\t<h4>A web app for finding songs of your preference</h4>\n                        <h4>Code available at <a href='https://github.com/andyhoang1994/music_recommender'>https://github.com/andyhoang1994/music_recommender</a></h4>\n\t\t\t\t</header>\n\t\t\t\t<Body \n\t\t\t\t\ttoken={this.props.accessToken} \n\t\t\t\t\thaveToken={this.state.haveToken} \n\t\t\t\t\ttokenValid={this.state.tokenValid}\n\t\t\t\t\tinvalidateToken={this.invalidateToken}/>\n\t\t\t</div>\n\t\t)\n\t};\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nfunction getAccessToken(){\n    var result = window.location.hash.match(/#(?:access_token)=([\\S\\s]*?)&/);\n    return (result ? result[1] : '');\n};\n\nReactDOM.render(<App accessToken={getAccessToken()}/>, document.getElementById('root'));"],"sourceRoot":""}